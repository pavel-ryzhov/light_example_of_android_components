plugins {
    id 'com.android.application'
}

android {
//  В коде будут доступен весь функционал API FRAMEWORK характерный для API 31 - Android 12
    compileSdkVersion 31
//  Это версия компиляторов (aapt, dx, компилятор renderscript и т. д.),
//  которые вы хотите использовать. Для каждого уровня API существует соответствие.
    buildToolsVersion "30.0.3"

// Номера версий приложения, а также требования к версии Android
    defaultConfig {
//      Пакет приложения
        applicationId "com.omisoft.myapplication"
//      Минимальная версия Андроид, какая будет поддерживаться в приложении (API 19 - Android 4.4)
        minSdkVersion 19
//      Максимальная версия Андроид, какая будет поддерживаться в приложении (API 31 - Android 12). Не может быть выше значения compileSdkVersion
        targetSdkVersion 31
//      Версия кода/билда/APК, который отличается от предыдущего. Этот номер не отображается для юзера.
        versionCode 1
//      Номер приложения, который видим для пользователя в Google Play/App Settings
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования кода
//          из библиотек которые не используються
            minifyEnabled true
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования неиспользуемых ресурсов,
//          в том числе из библиотек
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//          Создаем филду BASE_URL в файле BuildConfig со значением "debug_base_url" для сборки debug
            buildConfigField "String", "BASE_URL", "\"https://debug\""
            buildConfigField "String", "BASE_URL_SECOND", "\"https://debug-second\""
        }

        release {
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования кода
//          из библиотек которые не используються
            minifyEnabled true
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования неиспользуемых ресурсов,
//          в том числе из библиотек
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//          Создаем филду BASE_URL в файле BuildConfig со значением "debug_base_url" для сборки release
            buildConfigField "String", "BASE_URL", "\"release_base_url\""
        }

        example {
//          Говорим компилятору, что этот BuildType будет создан с настройками debug.
            initWith debug
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования кода
//          из библиотек которые не используються
            minifyEnabled true
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования неиспользуемых ресурсов,
//          в том числе из библиотек
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//          Создаем филду BASE_URL в файле BuildConfig со значением "debug_base_url" для сборки example
            buildConfigField "String", "BASE_URL", "\"example_base_url\""
        }

        example7 {
//          Говорим компилятору, что этот BuildType будет создан с настройками debug.
            initWith debug
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования кода
//          из библиотек которые не используються
            minifyEnabled true
//          При значении "true" - уменшает размер APK (Файл приложения) за счет игнорирования неиспользуемых ресурсов,
//          в том числе из библиотек
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//          Создаем филду BASE_URL в файле BuildConfig со значением "debug_base_url" для сборки example
            buildConfigField "String", "BASE_URL", "\"https://example7\""
            buildConfigField "String", "BASE_URL_SECOND", "\"https://example7-second\""
        }

        firstCustomBuild {
            initWith debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://firstCustomBuild\""
            buildConfigField "String", "BASE_URL_SECOND", "\"https://firstCustomBuild-second\""
            buildConfigField "String", "BASE_TYPE", "\"firstCustomBuild\""
            buildConfigField "Integer", "VERSION_CODE", "1"
            buildConfigField "Boolean", "IS_MINIFIED", "true"
        }

        secondCustomBuild {
            initWith debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://secondCustomBuild\""
            buildConfigField "String", "BASE_URL_SECOND", "\"https://secondCustomBuild-second\""
            buildConfigField "String", "BASE_TYPE", "\"secondCustomBuild\""
            buildConfigField "Integer", "VERSION_CODE", "2"
            buildConfigField "Boolean", "IS_MINIFIED", "false"
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                // начало названия
                def APP_TITLE = "My Application"
                // символ каким разделяем слова в названии
                def DEV_NAME = "DudnikV"
                //def SEPARATOR = "_"
                def SEPARATOR = "-"
                // какой билд (зависит от того, какой выбрали в Active Build Variant)
                def buildType = variant.buildType.name
                // versionName, который мы указали в defaultConfig -> versionName
                def version = variant.versionName
                // инициализация объекта даты
                def date = new Date()
                // указываем формат даты типа "09.11.21"
                def formattedDate = date.format('dd.MM.yy')

                // объединяем все в одну строчку
                //def apkName = APP_TITLE + SEPARATOR + buildType + SEPARATOR + version + SEPARATOR + formattedDate + ".apk"
                def apkName = buildType + SEPARATOR + "from" + SEPARATOR + DEV_NAME + SEPARATOR + formattedDate + ".apk"

                // создем APK файл с названием $apkName
                outputFileName = new File(apkName)
            }
        }
    }

    compileOptions {
//      Языковой уровень исходного кода java.
        sourceCompatibility JavaVersion.VERSION_1_8

//      Версия сгенерированного байт-кода Java.
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.5.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}